
# 1 配置shardingspherejdbc的分片策略（主从数据库配置）
# 1.1 配置数据源，给数据源起别名。水平分库，配置两个数据源
spring.shardingsphere.datasource.names=m1,m2,m0,s0

# 1.2 一个实体类对应2张表，覆盖
spring.main.allow-bean-definition-overriding=true

# 1.3.1 配置第 1 个数据源具体的内容，包含连接池，驱动，地址，用户名，密码
spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m1.url=jdbc:mysql://localhost:3306/edu_db_1?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.m1.username=root
spring.shardingsphere.datasource.m1.password=root
# 1.3.2 配置第 2 个数据源具体的内容，包含连接池，驱动，地址，用户名，密码
spring.shardingsphere.datasource.m2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m2.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m2.url=jdbc:mysql://localhost:3306/edu_db_2?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.m2.username=root
spring.shardingsphere.datasource.m2.password=root
# 1.3.3 配置第 2 个数据源具体的内容，包含连接池，驱动，地址，用户名，密码 (user_db主服务器)
spring.shardingsphere.datasource.m0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m0.url=jdbc:mysql://localhost:3306/user_db?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.m0.username=root
spring.shardingsphere.datasource.m0.password=root
# 1.3.4 配置第 2 个数据源具体的内容，包含连接池，驱动，地址，用户名，密码 (user_db从服务器)
spring.shardingsphere.datasource.s0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.s0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.s0.url=jdbc:mysql://localhost:3307/user_db?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.s0.username=root
spring.shardingsphere.datasource.s0.password=root

# 数据库配置主从 master：主；slave：从
spring.shardingsphere.sharding.master-slave-rules.ds0.master-data-source-name=m0
spring.shardingsphere.sharding.master-slave-rules.ds0.slave-data-source-names=s0
# t_user分表策略，固定配置至ds0的t_user真实表
spring.shardingsphere.sharding.tables.t_user.actual-data-nodes=ds0.t_user

# =========== 配置公共表 ==============
spring.shardingsphere.sharding.broadcast-tables=t_udict
spring.shardingsphere.sharding.tables.t_udict.key-generator.column=dictid
spring.shardingsphere.sharding.tables.t_udict.key-generator.type=SNOWFLAKE

# 1.4-1 配置 user_db 数据库里面 t_user 专库专表
#spring.shardingsphere.sharding.tables.t_user.actual-data-nodes=m$->{0}.t_user
# 1.5-2 指定 course 表里面主键生成策略(表的ID：cid，SNOWFLAKE：雪花算法)
spring.shardingsphere.sharding.tables.t_user.key-generator.column=user_id
spring.shardingsphere.sharding.tables.t_user.key-generator.type=SNOWFLAKE
# 1.6.1-1 指定 <表> 的分片策略  约定cid的值是偶数添加到course_1表，奇数添加到course_2表
spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.sharding-column=cid
spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.algorithm-expression=t_user

# 1.4-2 指定数据库的分布情况，数据库里面表分布情况
# m1 m2  course_1  course_2
spring.shardingsphere.sharding.tables.course.actual-data-nodes=m$->{1..2}.course_$->{1..2}
# 1.5-2 指定 course 表里面主键生成策略(表的ID：cid，SNOWFLAKE：雪花算法)
spring.shardingsphere.sharding.tables.course.key-generator.column=cid
spring.shardingsphere.sharding.tables.course.key-generator.type=SNOWFLAKE
# 1.6.1-2 指定 <表> 的分片策略  约定cid的值是偶数添加到course_1表，奇数添加到course_2表
spring.shardingsphere.sharding.tables.course.table-strategy.inline.sharding-column=cid
spring.shardingsphere.sharding.tables.course.table-strategy.inline.algorithm-expression=course_$->{cid % 2 + 1}
# 1.6.2 指定 <数据库> 的分片策略  user_id是一个偶数添加到m1，是奇数添加到m2
# spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=user_id   # default : 默认所有的表
# spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=m$->{user_id % 2 + 1}   # default : 默认所有的表
# 上面的写法：default默认所有的表，如果只想要部分表按照这个策略，替换成下面的写法  course表示表的名称（course_1，course_2，course_3......）
spring.shardingsphere.sharding.tables.course.database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.course.database-strategy.inline.algorithm-expression=m$->{user_id % 2 + 1}

# 1.7 控制台输出sql语句
spring.shardingsphere.props.sql.show=true

